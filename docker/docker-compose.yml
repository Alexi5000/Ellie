version: '3.8'

services:
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_SOCKET_URL=http://localhost:5000
      - REACT_APP_SERVICE_DISCOVERY_URL=http://localhost:5000/services
    volumes:
      - ../frontend:/app
      - /app/node_modules
    depends_on:
      - backend
      - redis
    networks:
      - ellie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health.json"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "service.name=ellie-frontend"
      - "service.version=1.0.0"
      - "service.tags=frontend,ui,react"

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: development
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - HOST=backend
      - CORS_ORIGIN=http://localhost:3000
      - REDIS_URL=redis://redis:6379
      - SERVICE_DISCOVERY_ENABLED=true
      - LOAD_BALANCING_STRATEGY=health_based
    env_file:
      - ../backend/.env
    volumes:
      - ../backend:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ellie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "service.name=ellie-backend"
      - "service.version=1.0.0"
      - "service.tags=backend,api,nodejs"

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - ellie-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "service.name=redis"
      - "service.version=7.0"
      - "service.tags=database,cache,redis"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - ellie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "service.name=nginx"
      - "service.version=1.0"
      - "service.tags=proxy,loadbalancer,nginx"

  # Service Discovery Dashboard (optional)
  service-dashboard:
    image: node:18-alpine
    ports:
      - "8080:8080"
    environment:
      - BACKEND_URL=http://backend:5000
    volumes:
      - ./service-dashboard:/app
    working_dir: /app
    command: sh -c "npm install && npm start"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ellie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "service.name=service-dashboard"
      - "service.version=1.0.0"
      - "service.tags=dashboard,monitoring,ui"

networks:
  ellie-network:
    driver: bridge
    labels:
      - "network.name=ellie-network"
      - "network.description=Ellie Voice Receptionist Network"

volumes:
  node_modules_frontend:
    labels:
      - "volume.name=frontend-node-modules"
  node_modules_backend:
    labels:
      - "volume.name=backend-node-modules"
  redis_data:
    labels:
      - "volume.name=redis-data"